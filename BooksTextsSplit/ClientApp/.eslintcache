[{"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\index.js":"1","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\serviceWorker.js":"2","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\App.js":"3","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\redux-store.js":"4","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\app-reducer.js":"5","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\hoc\\withSuspense.jsx":"6","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Header\\HeaderContainer.jsx":"7","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Footer\\FooterContainer.jsx":"8","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Login\\Login.jsx":"9","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UserProfile\\UserProfile.jsx":"10","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\SelectTextsContainer.jsx":"11","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Navbar\\Navbar.jsx":"12","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\WordsToPair\\WordsToPair.jsx":"13","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\ToReadAndTranslate\\ToReadAndTranslateContainer.jsx":"14","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\UploadBooksContainer.jsx":"15","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Settings\\Settings.jsx":"16","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\common\\preloader\\Preloader.jsx":"17","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\upload-reducer.js":"18","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\auth-reducer.js":"19","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\read-reducer.js":"20","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\select-reducer.js":"21","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\common\\validators\\Validators.js":"22","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\common\\formControls\\FormControls.js":"23","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Header\\Header.jsx":"24","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Footer\\Footer.jsx":"25","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\SelectTexts.jsx":"26","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\hoc\\withAuthRedirect.jsx":"27","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\ToReadAndTranslate\\ToReadAndTranslate.jsx":"28","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\UploadBooks.jsx":"29","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\api\\api.js":"30","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\ChoosePairBooksNames\\ChoosePairBooksNames.jsx":"31","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\ShowChooseHeader\\ShowChooseHeader.jsx":"32","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\QuickViewBooksPair\\QuickViewBooksPair.jsx":"33","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-2\\ShowSelectedFiles.jsx":"34","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\ChooseBooksVersions\\ChooseBooksVersions.jsx":"35","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-2\\SelectBookFiles.jsx":"36","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-2_row-1\\sectionDbInfoHeader.jsx":"37","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-3\\uploadFiles.jsx":"38","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-3\\ShowFilesToUpload.jsx":"39","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-2_row-2\\sectionDbDetails.jsx":"40","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-2\\ShowFiles.jsx":"41","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-2\\ShowFileDescriptions.jsx":"42","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-2\\RadioButtons.jsx":"43"},{"size":760,"mtime":1604016869579,"results":"44","hashOfConfig":"45"},{"size":5085,"mtime":499162500000,"results":"46","hashOfConfig":"45"},{"size":3561,"mtime":1607105981327,"results":"47","hashOfConfig":"45"},{"size":885,"mtime":1602950337145,"results":"48","hashOfConfig":"45"},{"size":1340,"mtime":1604427871810,"results":"49","hashOfConfig":"45"},{"size":249,"mtime":1601591878000,"results":"50","hashOfConfig":"45"},{"size":547,"mtime":1604428187782,"results":"51","hashOfConfig":"45"},{"size":466,"mtime":1604338973034,"results":"52","hashOfConfig":"45"},{"size":2228,"mtime":1606943816105,"results":"53","hashOfConfig":"45"},{"size":194,"mtime":1584402093000,"results":"54","hashOfConfig":"45"},{"size":2341,"mtime":1607113335730,"results":"55","hashOfConfig":"45"},{"size":1173,"mtime":1604341690088,"results":"56","hashOfConfig":"45"},{"size":195,"mtime":1584402061000,"results":"57","hashOfConfig":"45"},{"size":2916,"mtime":1602949782509,"results":"58","hashOfConfig":"45"},{"size":3889,"mtime":1606833558650,"results":"59","hashOfConfig":"45"},{"size":181,"mtime":1584401974000,"results":"60","hashOfConfig":"45"},{"size":336,"mtime":1604352745387,"results":"61","hashOfConfig":"45"},{"size":14502,"mtime":1607103198246,"results":"62","hashOfConfig":"45"},{"size":4725,"mtime":1604423667821,"results":"63","hashOfConfig":"45"},{"size":3724,"mtime":1590273336000,"results":"64","hashOfConfig":"45"},{"size":6195,"mtime":1607806815630,"results":"65","hashOfConfig":"45"},{"size":295,"mtime":1601591787000,"results":"66","hashOfConfig":"45"},{"size":2214,"mtime":1603662621779,"results":"67","hashOfConfig":"45"},{"size":1436,"mtime":1607025629167,"results":"68","hashOfConfig":"45"},{"size":371,"mtime":1604339659587,"results":"69","hashOfConfig":"45"},{"size":975,"mtime":1596581214000,"results":"70","hashOfConfig":"45"},{"size":668,"mtime":1602889458664,"results":"71","hashOfConfig":"45"},{"size":3132,"mtime":1590273458000,"results":"72","hashOfConfig":"45"},{"size":4439,"mtime":1607023334721,"results":"73","hashOfConfig":"45"},{"size":4148,"mtime":1607105171437,"results":"74","hashOfConfig":"45"},{"size":1637,"mtime":1608143712370,"results":"75","hashOfConfig":"45"},{"size":1032,"mtime":1607113058297,"results":"76","hashOfConfig":"45"},{"size":2152,"mtime":1596635190000,"results":"77","hashOfConfig":"45"},{"size":849,"mtime":1604074187366,"results":"78","hashOfConfig":"45"},{"size":2063,"mtime":1607113335730,"results":"79","hashOfConfig":"45"},{"size":1392,"mtime":1607025556378,"results":"80","hashOfConfig":"45"},{"size":760,"mtime":1607025708393,"results":"81","hashOfConfig":"45"},{"size":598,"mtime":1607025732538,"results":"82","hashOfConfig":"45"},{"size":524,"mtime":1604273903557,"results":"83","hashOfConfig":"45"},{"size":1738,"mtime":1607101079070,"results":"84","hashOfConfig":"45"},{"size":1950,"mtime":1604017523713,"results":"85","hashOfConfig":"45"},{"size":1156,"mtime":1603928220104,"results":"86","hashOfConfig":"45"},{"size":1688,"mtime":1604017524812,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"10rhg5d",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"90"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"90"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\index.js",[],["185","186"],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\serviceWorker.js",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\App.js",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\redux-store.js",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\app-reducer.js",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\hoc\\withSuspense.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Header\\HeaderContainer.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Footer\\FooterContainer.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Login\\Login.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UserProfile\\UserProfile.jsx",["187"],"import React from 'react';\r\nimport s from './UserProfile.module.css'\r\n\r\nconst UserProfile = (props) => {\r\n    return (<div>\r\n        User Profile\r\n    </div>)\r\n}\r\n\r\nexport default UserProfile;\r\n","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\SelectTextsContainer.jsx",["188","189"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { switchBooksIdsOn, switchBookVersionsOn, switchQuickViewOn, nextAfterQuickView } from \"../../redux/select-reducer\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport SelectTexts from \"./SelectTexts\";\r\nimport Preloader from \"../common/preloader/Preloader\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nclass SelectTextsContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.switchBooksIdsOn();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.isFetching ? <Preloader /> : null}\r\n        <SelectTexts\r\n          sentencesCount={this.props.sentencesCount}\r\n          allBookNamesSortedByIds={this.props.allBookNamesSortedByIds}\r\n          allBookVersions={this.props.allBookVersions}\r\n          booksPairTexts={this.props.booksPairTexts}\r\n          booksNamesIds={this.props.booksNamesIds}\r\n          isSelectBookId={this.props.isSelectBookId}\r\n          isSelectVersion={this.props.isSelectVersion}\r\n          isFetching={this.props.isFetching}\r\n          isQuickViewBooksPair={this.props.isQuickViewBooksPair}\r\n          switchBooksIdsOn={this.props.switchBooksIdsOn}\r\n          switchBookVersionsOn={this.props.switchBookVersionsOn}\r\n          switchQuickViewOn={this.props.switchQuickViewOn}\r\n          nextAfterQuickView={this.props.nextAfterQuickView}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    sentencesCount: state.selectTextsPage.sentencesCount,\r\n    isSelectBookId: state.selectTextsPage.isSelectBookId,\r\n    isSelectVersion: state.selectTextsPage.isSelectVersion,\r\n    isFetching: state.selectTextsPage.isFetching,\r\n    allBookNamesSortedByIds: state.selectTextsPage.allBookNamesSortedByIds,\r\n    booksNamesIds: state.selectTextsPage.booksNamesIds,\r\n    allBookVersions: state.selectTextsPage.allBookVersions,\r\n    booksPairTexts: state.selectTextsPage.booksPairTexts,\r\n    isQuickViewBooksPair: state.selectTextsPage.isQuickViewBooksPair,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { switchBooksIdsOn, switchBookVersionsOn, switchQuickViewOn, nextAfterQuickView }),\r\n  withAuthRedirect,\r\n  /* withRouter */\r\n)(SelectTextsContainer);\r\n\r\n","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Navbar\\Navbar.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\WordsToPair\\WordsToPair.jsx",["190"],"import React from 'react';\r\nimport s from './WordsToPair.module.css'\r\n\r\nconst WordsToPair = (props) => {\r\n    return (<div>\r\n        Words To Pair\r\n    </div>)\r\n}\r\n\r\nexport default WordsToPair;\r\n","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\ToReadAndTranslate\\ToReadAndTranslateContainer.jsx",["191","192"],"import React from \"react\";\r\nimport Axios from \"axios\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport ReactScrollWheelHandler from \"react-scroll-wheel-handler\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { scrollLineUp, scrollLineDown, toggleIsLoading, setSentencesCount, setSentences, toggleIsFetching } from \"../../redux/read-reducer\";\r\nimport ToReadAndTranslate from \"./ToReadAndTranslate\";\r\nimport Preloader from \"../common/preloader/Preloader\";\r\n\r\nclass ToReadAndTranslateContainerAPI extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchSentences(0);\r\n    this.fetchSentences(1);\r\n  }\r\n\r\n  fetchSentences = (languageId) => {\r\n    this.props.toggleIsFetching(true);\r\n    Axios.get(`/api/BookTexts/count/${languageId}`).then((Response) => {\r\n      this.props.toggleIsFetching(false);\r\n      this.props.setSentencesCount(Response.data.sentencesCount, languageId);\r\n      this.props.sentencesCount[languageId] === 0 ? this.props.toggleIsLoading(false, languageId) : this.props.toggleIsLoading(true, languageId);\r\n    });\r\n    this.props.toggleIsFetching(true);\r\n    debugger;\r\n    Axios.get(`/api/BookTexts/BookText/${languageId}`).then((Response) => {\r\n      this.props.toggleIsFetching(false);\r\n      this.props.setSentences(Response.data.sentences, languageId);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.isFetching ? <Preloader /> : null}\r\n        <ToReadAndTranslate\r\n          lastSentenceNumber={this.props.lastSentenceNumber}\r\n          readingSentenceNumber={this.props.readingSentenceNumber}\r\n          sentencesOnPageTop={this.props.sentencesOnPageTop}\r\n          sentencesOnPageBottom={this.props.sentencesOnPageBottom}\r\n          sentencesCount={this.props.sentencesCount}\r\n          engSentences={this.props.engSentences}\r\n          rusSentences={this.props.rusSentences}\r\n          scrollLineUp={this.props.scrollLineUp}\r\n          scrollLineDown={this.props.scrollLineDown}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    lastSentenceNumber: state.readAndTranslatePage.lastSentenceNumber,\r\n    readingSentenceNumber: state.readAndTranslatePage.readingSentenceNumber,\r\n    sentencesOnPageTop: state.readAndTranslatePage.sentencesOnPageTop,\r\n    sentencesOnPageBottom: state.readAndTranslatePage.sentencesOnPageBottom,\r\n    sentencesCount: state.readAndTranslatePage.sentencesCount,\r\n    engSentences: state.readAndTranslatePage.engSentences,\r\n    rusSentences: state.readAndTranslatePage.rusSentences,\r\n  };\r\n};\r\n\r\nlet ToReadAndTranslateContainer = compose(\r\n  connect(mapStateToProps, { scrollLineUp, scrollLineDown, toggleIsLoading, setSentencesCount, setSentences, toggleIsFetching }),\r\n  withAuthRedirect\r\n)(ToReadAndTranslateContainerAPI);\r\n\r\nexport default ToReadAndTranslateContainer;\r\n","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\UploadBooksContainer.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Settings\\Settings.jsx",["193"],"import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings = (props) => {\r\n    return (<div>\r\n        Settings\r\n    </div>)\r\n}\r\n\r\nexport default Settings;\r\n","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\common\\preloader\\Preloader.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\upload-reducer.js",["194","195","196"],"import { uploadAPI } from \"../api/api\";\r\nimport { toggleIsFetching } from \"./app-reducer\";\r\n\r\nconst SET_DB_SENTENCES_COUNT = \"SET-DB-SENTENCES-COUNT\";\r\nconst SET_SENTENCES_COUNT = \"SET-SENTENCES-COUNT\";\r\nconst SET_TASK_DONE_PERCENTS = \"SET-TASK-DONE-PERCENTS\";\r\nconst SET_FILE_NAME = \"SET-FILE-NAME\";\r\nconst SET_BOOKS_DESCRIPTIONS = \"SET-BOOKS-DESCRIPTIONS\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\";\r\nconst TOGGLE_IS_LOADING = \"TOGGLE-IS-LOADING\";\r\nconst TOGGLE_IS_DONE_UPLOAD = \"TOGGLE-IS-DONE-UPLOAD\";\r\nconst TOGGLE_IS_WRONG_COUNT = \"TOGGLE-IS-WRONG-COUNT\";\r\nconst TOGGLE_UPLOAD_BUTTON_ENABLE = \"TOGGLE-UPLOAD-BUTTON-ENABLE\";\r\nconst RADIO_DEFAULT = \"RADIO-DEFAULT\";\r\nconst RADIO_IS_CHANGED = \"RADIO-IS-CHANGED\";\r\nconst SHOW_HIDE_STATE = \"SHOW-HIDE-STATE\";\r\nconst FIND_MAX_UPLOADED = \"FIND-MAX-UPLOADED\";\r\n\r\nlet initialState = {\r\n  selectedFiles: null, // used in ShowSelectedFiles\r\n  radioChosenLanguage: [\"eng\", \"rus\"], // here default values of radio buttons to choose language\r\n  radioAutoChangeLang: [\r\n    [\"eng\", \"rus\"],\r\n    [\"rus\", \"eng\"],\r\n  ],\r\n  radioAutoChangeLangInversed: [\r\n    [\"rus\", \"eng\"],\r\n    [\"eng\", \"rus\"],\r\n  ],\r\n  filesDescriptions: {\r\n    index: \"File No: \",\r\n    name: \"File name: \",\r\n    lastMod: \"Last modified: \",\r\n    size: \"File size: \",\r\n    type: \"File type: \",\r\n    chosenLanguage: \"Chosen file language: \",\r\n  }, // used in ShowSelectedFiles\r\n  uploadBooksLabels: {\r\n    uploadBooksHeader1: \"UPLOAD BOOKS \",\r\n    uploadBooksHeader2: \"CONTROL PANEL \",\r\n    dbInfoHeader: \"DB info\",\r\n    nearShowButton: \" records, details - \",\r\n    uploadButton: \"Upload\",\r\n  },\r\n  filesLanguageIds: [\r\n    {\r\n      languageId: 0,\r\n      languageShortName: \"eng\",\r\n      languageName: \"English\",\r\n    },\r\n    {\r\n      languageId: 1,\r\n      languageShortName: \"rus\",\r\n      languageName: \"Russian\",\r\n    },\r\n  ],\r\n  booksTitles: [{}, {}],\r\n  sentencesCount: [-1, -2, -3, -4, -5],\r\n  dbSentencesCount: {\r\n    booksIdsCount: 0,\r\n    versionsCountLanguageId: 0,\r\n    paragraphsCountLanguageId: 0,\r\n    sentencesCountLanguageId: 0,\r\n    allBooksIdsList: [],\r\n    versionsCountsInBooksIds: [],\r\n    paragraphsCountsInBooksIds: [],\r\n    sentencesCountsInBooksIds: [],\r\n    totalRecordsCount: 0,\r\n  },\r\n  emptyVariable: null,\r\n  isTextLoaded: [false, false],\r\n  isFetching: false,\r\n  uploadedVersions: [],\r\n  maxUploadedVersion: -1,\r\n  labelShowHide: [\r\n    { label: \"Show\", value: false }, // value - are details shown\r\n    { label: \"Hide\", value: true },\r\n  ],\r\n  isDoneUpload: false,\r\n  isUploadButtonDisabled: true,\r\n  isWrongCount: false,\r\n  metadataHeader: \"6L1n2qR1yzE0IjTZpUksGkbzF23vVGZeR0nEXL6qKhdXBGoJzSKqE9a1g\",\r\n  taskDone: [{ doneInPercents: 0 }, { doneInPercents: 0 }],\r\n  endWhilePercents: 100,\r\n  whoCalledPreloader: \"\",\r\n};\r\n\r\nconst uploadBooksReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TOGGLE_IS_LOADING: {\r\n      /* return { ...state, isEngLoaded: action.isEngLoaded } */\r\n      let stateCopy = { ...state };\r\n      stateCopy.isTextLoaded = { ...state.isTextLoaded };\r\n      stateCopy.isTextLoaded[action.languageId] = action.isTextLoaded;\r\n      return stateCopy;\r\n    }\r\n    case SET_DB_SENTENCES_COUNT: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.dbSentencesCount = { ...state.dbSentencesCount };\r\n      stateCopy.dbSentencesCount[action.languageId] = action.payload;\r\n      return stateCopy;\r\n    }\r\n    case SET_SENTENCES_COUNT: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.sentencesCount = { ...state.sentencesCount };\r\n      stateCopy.sentencesCount[action.index] = action.count;\r\n      return stateCopy;\r\n    }\r\n    case SET_TASK_DONE_PERCENTS: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.taskDone = { ...state.taskDone };\r\n      stateCopy.taskDone[0] = action.response[0];\r\n      stateCopy.taskDone[1] = action.response[1];\r\n      return stateCopy;\r\n    }\r\n    case SET_FILE_NAME: {\r\n      return { ...state, selectedFiles: action.files };\r\n    }\r\n    case SET_BOOKS_DESCRIPTIONS: {\r\n      return { ...state, booksTitles: action.textsMetadata };\r\n    }\r\n    case RADIO_IS_CHANGED: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.radioChosenLanguage = { ...state.radioChosenLanguage };\r\n      stateCopy.booksTitles = { ...state.booksTitles };\r\n      let viceVersaBooksTitles = false;\r\n      if (action.chosenLang === \"eng\") {\r\n        stateCopy.radioChosenLanguage = state.radioAutoChangeLang[action.i];\r\n        // если неправильный languageId - получено \"eng\", а он = 1, меняем местами booksTitles.languageId\r\n        if (stateCopy.booksTitles[action.i].languageId === 1) {\r\n          viceVersaBooksTitles = true;\r\n        }\r\n      } else {\r\n        stateCopy.radioChosenLanguage = state.radioAutoChangeLangInversed[action.i];\r\n        if (stateCopy.booksTitles[action.i].languageId === 0) {\r\n          viceVersaBooksTitles = true;\r\n        }\r\n      }\r\n      if (viceVersaBooksTitles) {\r\n        [stateCopy.booksTitles[0].languageId, stateCopy.booksTitles[1].languageId] = [\r\n          stateCopy.booksTitles[1].languageId,\r\n          stateCopy.booksTitles[0].languageId,\r\n        ];\r\n      }\r\n      return stateCopy;\r\n    }\r\n    case RADIO_DEFAULT: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.radioChosenLanguage = { ...state.radioChosenLanguage };\r\n      state.filesLanguageIds.map((fli) => {\r\n        if (action.defaultLanguageId === fli.languageId) {\r\n          stateCopy.radioChosenLanguage[action.i] = fli.languageShortName;\r\n        }\r\n      });\r\n      return stateCopy;\r\n    }\r\n    case SHOW_HIDE_STATE: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.labelShowHide = { ...state.labelShowHide };\r\n      let tempValue = state.labelShowHide[0];\r\n      stateCopy.labelShowHide[0] = state.labelShowHide[1];\r\n      stateCopy.labelShowHide[1] = tempValue;\r\n      return stateCopy;\r\n    }\r\n    /* case TOGGLE_IS_FETCHING: {\r\n      if (action.isFetching) {\r\n        return { ...state, isFetching: action.isFetching, whoCalledPreloader: action.whoCalled };\r\n      } else {\r\n        return { ...state, isFetching: action.isFetching, whoCalledPreloader: \"\" };\r\n      }\r\n    } */\r\n    case TOGGLE_IS_DONE_UPLOAD: {\r\n      return { ...state, isDoneUpload: action.isDoneUpload };\r\n    }\r\n    case TOGGLE_UPLOAD_BUTTON_ENABLE: {\r\n      return { ...state, isUploadButtonDisabled: action.isUploadButtonDisabled };\r\n    }\r\n    case TOGGLE_IS_WRONG_COUNT: {\r\n      return { ...state, isWrongCount: action.isWrongCount };\r\n    }\r\n    case FIND_MAX_UPLOADED: {\r\n      let findMax = -1;\r\n      action.uploadedVersions.map((u) => {\r\n        if (u > findMax) {\r\n          findMax = u;\r\n        }\r\n      });\r\n      return { ...state, maxUploadedVersion: findMax };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/* {\r\n  ...state,\r\n  ...action.payload,\r\n  //isAuth: action.isAuth,\r\n};\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({ type: SET_USER_DATA, payload: { userId, email, login, isAuth } });\r\n */\r\n\r\nconst setSentencesCount = (count, index) => ({ type: SET_SENTENCES_COUNT, count, index });\r\nconst setDbSentencesCount = (payload, languageId) => ({ type: SET_DB_SENTENCES_COUNT, payload, languageId });\r\nconst setTaskDonePercents = (response) => ({ type: SET_TASK_DONE_PERCENTS, response });\r\n\r\nconst toggleIsLoading = (isTextLoaded, languageId) => ({ type: TOGGLE_IS_LOADING, isTextLoaded, languageId });\r\n//const toggleIsFetching = (isFetching, whoCalled) => ({ type: TOGGLE_IS_FETCHING, isFetching, whoCalled });\r\nconst toggleIsDoneUpload = (isDoneUpload) => ({ type: TOGGLE_IS_DONE_UPLOAD, isDoneUpload });\r\nconst toggleUploadButtonDisable = (isUploadButtonDisabled) => ({ type: TOGGLE_UPLOAD_BUTTON_ENABLE, isUploadButtonDisabled });\r\n\r\nconst setFileName = (files) => ({ type: SET_FILE_NAME, files });\r\nconst setBooksDescriptions = (textsMetadata) => ({ type: SET_BOOKS_DESCRIPTIONS, textsMetadata });\r\n\r\nconst wrongFilesCountSelected = (isWrongCount) => ({ type: TOGGLE_IS_WRONG_COUNT, isWrongCount });\r\nconst setRadioDefault = (defaultLanguageId, i) => ({ type: RADIO_DEFAULT, defaultLanguageId, i });\r\nexport const setRadioResult = (chosenLang, i) => ({ type: RADIO_IS_CHANGED, chosenLang, i }); // used in ShowSelectedFiles\r\nexport const setShowHideState = (chosenLang, i) => ({ type: SHOW_HIDE_STATE, chosenLang, i }); // used in ShowSelectedFiles\r\n\r\nconst fetchLastUploadedVersions = (bookTitle) => async (dispatch, getState) => {\r\n  dispatch(toggleIsFetching(true, \"fetchLastUploadedVersions\"));\r\n  const response = await uploadAPI.getLastUploadedVersions(bookTitle.bookId, bookTitle.languageId); // to find all previously uploaded versions of the file with this bookId\r\n  dispatch(toggleIsFetching(false));\r\n  bookTitle.uploadVersion = response.maxUploadedVersion;\r\n  return bookTitle;\r\n};\r\n\r\nexport const setFilesNamesAndEnableUpload = (files) => async (dispatch) => {\r\n  //check user selected books pair\r\n  dispatch(wrongFilesCountSelected(false));\r\n  dispatch(toggleIsDoneUpload(false));\r\n  if (files) {\r\n    if (files.length === 2) {\r\n      dispatch(setFileName(files));\r\n      dispatch(toggleUploadButtonDisable(false));\r\n      dispatch(setFilesMetadata(files));\r\n    } else {\r\n      dispatch(wrongFilesCountSelected(true));\r\n    }\r\n  } else {\r\n    dispatch(setFileName(files));\r\n    dispatch(toggleUploadButtonDisable(true));\r\n  }\r\n};\r\n\r\nconst setFilesMetadata = (files) => async (dispatch, getState) => {\r\n  let textsMetadata = [{}, {}];\r\n  for (let i = 0; i < files.length; i++) {\r\n    //let file = files[i];\r\n    let reader = new FileReader();\r\n    reader.readAsText(files[i]);\r\n    reader.onload = () => {\r\n      // let textStrings = reader.result;\r\n      const textFirst18Lines = reader.result.split(\"\\n\").slice(0, 18);\r\n      //console.log(textFirst18Lines);\r\n      if (textFirst18Lines[0].indexOf(getState().uploadBooksPage.metadataHeader) !== -1) {\r\n        textsMetadata[i].bookId = parseInt(textFirst18Lines[2], 10);\r\n        let currentLangId = parseInt(textFirst18Lines[4], 10);\r\n        textsMetadata[i].languageId = currentLangId;\r\n        dispatch(setRadioDefault(currentLangId, i));\r\n        let bookProperties = {};\r\n        bookProperties.authorNameId = parseInt(textFirst18Lines[6], 10);\r\n        bookProperties.authorNameId = parseInt(textFirst18Lines[6], 10);\r\n        bookProperties.authorName = textFirst18Lines[8];\r\n        bookProperties.bookNameId = parseInt(textFirst18Lines[10], 10);\r\n        bookProperties.bookName = textFirst18Lines[12];\r\n        bookProperties.bookAnnotation = textFirst18Lines[14];\r\n        textsMetadata[i].bookProperties = bookProperties;\r\n      }\r\n    };\r\n    reader.onerror = () => {\r\n      console.log(reader.error);\r\n    };\r\n  }\r\n  dispatch(setBooksDescriptions(textsMetadata));\r\n};\r\n\r\nconst postBooksTexts = (formData, i) => async (dispatch) => {\r\n  dispatch(toggleIsFetching(true, \"postBooksTexts\"));\r\n  const response = await uploadAPI.uploadFile(formData); //post returns response before all records have loaded in db\r\n  dispatch(toggleIsFetching(false));\r\n  dispatch(setSentencesCount(response, i)); //totalCount\r\n  return response;\r\n};\r\n\r\nconst fetchTaskDonePercents = (taskGuid) => async (dispatch, getState) => {\r\n  let response = [{}, {}];\r\n  dispatch(toggleIsFetching(true, \"fetchTaskDonePercents\"));\r\n  let recordsTotalCount = (await uploadAPI.getUploadTaskPercents(taskGuid[0])).recordsTotalCount - 1; // to change numeration started from 1, not from 0\r\n  let currentUploadingRecord = 0;\r\n  /* while (currentUploadingRecord < recordsTotalCount) {\r\n    response[0] = await uploadAPI.getUploadTaskPercents(taskGuid[0]);\r\n    response[1] = await uploadAPI.getUploadTaskPercents(taskGuid[1]);\r\n    currentUploadingRecord = response[0].currentUploadingRecord + 1; // to change numeration started from 1, not from 0\r\n    response[0].doneInPercents = ((response[0].currentUploadingRecord * 100) / (response[0].recordsTotalCount * 100)) * 100;\r\n    response[1].doneInPercents = ((response[1].currentUploadingRecord * 100) / (response[1].recordsTotalCount * 100)) * 100;\r\n    dispatch(setTaskDonePercents(response));\r\n  } */\r\n  while (currentUploadingRecord !== recordsTotalCount) {\r\n    for (let i = 0; i < taskGuid.length; i++) {\r\n      response[i] = await uploadAPI.getUploadTaskPercents(taskGuid[i]);\r\n      response[i].doneInPercents = Math.round(\r\n        ((response[i].currentUploadingRecord * 100) / ((response[i].recordsTotalCount - 1) * 100)) * 100\r\n      );\r\n    }\r\n    currentUploadingRecord = await response[0].currentUploadingRecord;\r\n    //response[1] = await uploadAPI.getUploadTaskPercents(taskGuid[1]);\r\n    //response[1].doneInPercents = ((response[1].currentUploadingRecord * 100) / (response[1].recordsTotalCount * 100)) * 100;\r\n    dispatch(setTaskDonePercents(response));\r\n  }\r\n  // response[0].doneInPercents = 100;\r\n  // response[1].doneInPercents = 100;\r\n  // dispatch(setTaskDonePercents(response));\r\n  dispatch(toggleIsFetching(false));\r\n};\r\n\r\nexport const fetchSentencesCount = (languageId) => async (dispatch, getState) => {\r\n  dispatch(toggleIsFetching(true, \"fetchSentencesCount\"));\r\n  const response = await uploadAPI.getSentenceCount(languageId);\r\n  dispatch(toggleIsFetching(false));\r\n  dispatch(setDbSentencesCount(response, languageId));\r\n  getState().uploadBooksPage.dbSentencesCount.sentencesCountLanguageId[languageId] === 0\r\n    ? dispatch(toggleIsLoading(false, languageId))\r\n    : dispatch(toggleIsLoading(true, languageId));\r\n  return response.sentencesCount;\r\n};\r\n\r\nexport const fileUploadHandler = (selectedFiles) => async (dispatch, getState) => {\r\n  let response = [{}, {}];\r\n  dispatch(toggleUploadButtonDisable(true));\r\n  dispatch(toggleIsDoneUpload(true));\r\n  for (let i = 0; i < selectedFiles.length; i++) {\r\n    const form = new FormData();\r\n    form.append(\"bookFile\", selectedFiles[i], selectedFiles[i].name);\r\n    const bookTitle = getState().uploadBooksPage.booksTitles[i]; //[0];\r\n    dispatch(toggleIsFetching(true, \"fileUploadHandler\"));\r\n    // to add maxUploadedVersion to formData it is necessary to find it in Cosmos Db\r\n    const bookTitleWithVersion = await dispatch(fetchLastUploadedVersions(bookTitle));\r\n    const bookTitleWithVersionJson = JSON.stringify(bookTitleWithVersion);\r\n    form.append(\"jsonBookDescription\", bookTitleWithVersionJson);\r\n    response[i] = await dispatch(postBooksTexts(form, i));\r\n    dispatch(toggleIsFetching(false));\r\n  }\r\n  await dispatch(fetchTaskDonePercents(response));\r\n};\r\n\r\nexport default uploadBooksReducer;\r\n","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\auth-reducer.js",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\read-reducer.js",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\redux\\select-reducer.js",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\common\\validators\\Validators.js",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\common\\formControls\\FormControls.js",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Header\\Header.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\Footer\\Footer.jsx",["197","198"],"import React from \"react\";\r\nimport s from \"./Footer.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport logoPicture from \"../../assets/images/logoPicture.png\";\r\n\r\nconst Footer = (props) => {\r\n  //let readingSentence = props.readAndTranslatePage.readingSentenceNumber;\r\n  return <footer className={s.footer}>Footer</footer>;\r\n};\r\n\r\nexport default Footer;\r\n\r\n","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\SelectTexts.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\hoc\\withAuthRedirect.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\ToReadAndTranslate\\ToReadAndTranslate.jsx",["199","200"],"import React from 'react';\r\nimport ReactScrollWheelHandler from 'react-scroll-wheel-handler';\r\nimport s from './ToReadAndTranslate.module.css'\r\nimport topArrow from '../../assets/images/tiny-arrow-top-2-512.webp';\r\nimport bottomArrow from '../../assets/images/tiny-arrow-bottom-2-512.png';\r\n\r\nconst showSentences = (langSentences, startSentence, sentencesOnPageTop) => {\r\n    let endSentence = startSentence + sentencesOnPageTop;\r\n    return langSentences.slice(startSentence, endSentence).map((sts) => {\r\n        return <div /* className={s.oneSentence} */>\r\n            {sts.sentenceText}\r\n        </div>\r\n    })\r\n};\r\n\r\nconst showCurrentSentenceContext = (currentLangSentence) => {\r\n    if (currentLangSentence) {\r\n        return <div>\r\n            {'chapterName = '\r\n            + currentLangSentence.chapterName\r\n            + ' / id = ' \r\n            + currentLangSentence.bookSentenceId \r\n            + ' / ' \r\n            + currentLangSentence.sentenceText}\r\n        </div>\r\n    };\r\n}\r\n\r\nlet ToReadAndTranslate = (props) => {\r\n    let r = props.readingSentenceNumber;\r\n    let sentencesOnPageTop = props.sentencesOnPageTop;\r\n\r\n    return (<div>\r\n        <div className={s.editWrapper}>\r\n            <div className={s.lastSentenceNumber}>\r\n                {props.sentencesCount[0]}\r\n            </div>\r\n            <div className={s.editLine}>\r\n                Edit line\r\n                </div>\r\n            <div className={s.readingSentenceNumber}>\r\n                {r}\r\n            </div>\r\n        </div>\r\n        <div></div>\r\n        <ReactScrollWheelHandler\r\n            upHandler={() => { props.scrollLineUp(r) }}\r\n            downHandler={() => { props.scrollLineDown(r, props.sentencesCount[0]) }}\r\n            timeout={100} >\r\n            <div className={s.sentencesWrapper}>\r\n                <div className={s.topMargin}></div>\r\n                <div className={s.topSentences}>\r\n                    {showSentences(props.engSentences, r - sentencesOnPageTop, sentencesOnPageTop)}\r\n                </div>\r\n                <button onClick={() => { props.scrollLineUp(r) }} className={s.buttonUp} ><img src={topArrow} />Line Up</button>\r\n                <div className={s.engReadingSentence}>\r\n                <div className={s.engReadingFlex}>\r\n                    {showCurrentSentenceContext(props.engSentences[r])}\r\n                    </div>\r\n                </div>\r\n                <div className={s.rusReadingSentence}>\r\n                    {showCurrentSentenceContext(props.rusSentences[r])}\r\n                </div>\r\n                <div className={s.bottomSentences}>\r\n                    <div className={s.linearGradient}>\r\n                    {showSentences(props.engSentences, r + 1, sentencesOnPageTop)}\r\n                    </div>\r\n                </div>\r\n                <div className={s.buttonDown}>\r\n                <button onClick={() => { props.scrollLineDown(r, props.sentencesCount[0])}} className={s.buttonDownContent}>Line Down<img src={bottomArrow} /></button>\r\n                </div>\r\n            </div>\r\n        </ReactScrollWheelHandler>\r\n    </div >)\r\n}\r\n\r\nexport default ToReadAndTranslate;\r\n","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\UploadBooks.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\api\\api.js",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\ChoosePairBooksNames\\ChoosePairBooksNames.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\ShowChooseHeader\\ShowChooseHeader.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\QuickViewBooksPair\\QuickViewBooksPair.jsx",["201"],"import React from 'react';\r\nimport s from './QuickViewBooksPair.module.css';\r\n\r\n// Render Book Version - Map by uploadVersions\r\nlet sentencesMap = (props, nd, n) => {\r\n  return nd.sentences.map((id, i) => {\r\n    let versionSentencesPlace = `versionSentencesPlace${n}`;\r\n    return (      \r\n      <div className={s.versionItemsBlock1Container3}>\r\n        <div className={s.versionSentencesPlace}>{showBookVersions(id, i)}</div>         \r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\n// show existing version of the selected book - separate lists for both languages\r\nlet showBookVersions = (id, j) => {\r\n  //debugger;\r\n  return (\r\n    <div className={s.versionItemText}>\r\n      <div>\r\n        Fetched {\" j = \" + j} {\" uploadVersion = \" + id.uploadVersion}\r\n      </div>\r\n      <div>\r\n        <div>Book No: {\" \" + j + \" \"} name - </div>\r\n        <div>{id.authorName + \" \"} {id.bookName}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nlet showVersionsButtons = (props, n) => {//className={s.versionButtonsPlace} is unused\r\n  if(n===1){\r\n  return (<div className={s.versionButtonGridContainer}>\r\n    <button className={s.selectVersionButton} onClick={() => { props.nextAfterQuickView(\"read\"); }}> Select Books for reading </button>\r\n    <button className={s.editVersionButton} onClick={() => { props.nextAfterQuickView(\"edit\"); }}> Edit Books Pair </button>\r\n    <button className={s.deleteVersionButton} onClick={() => { props.nextAfterQuickView(\"delete\"); }}>DELETE THESE BOOKS!</button>\r\n  </div>);\r\n  };\r\n};\r\n\r\n// Render Book Version - Map by languageId\r\nconst QuickViewBooksPair = (props) => {  \r\n  if (props.isQuickViewBooksPair) {\r\n    return props.booksPairTexts.map((nd, n) => {\r\n      let bookName = nd.sentences[0].bookName;\r\n      return (<div className={s.versionLanguageStyle}>\r\n          <div className={s.versionItemsHeader}> Book Text with languageId = {n}</div>\r\n          <div>{bookName}</div>\r\n          <div className={s.versionItemsBlock}>{sentencesMap(props, nd, n)} </div>\r\n          <div className={s.versionButtonPlace}>{showVersionsButtons(props, n)}</div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n};\r\n\r\nexport default QuickViewBooksPair;\r\n  ","C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-2\\ShowSelectedFiles.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\SelectTexts\\ChooseBooksVersions\\ChooseBooksVersions.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-2\\SelectBookFiles.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-2_row-1\\sectionDbInfoHeader.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-3\\uploadFiles.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-3\\ShowFilesToUpload.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-2_row-2\\sectionDbDetails.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-2\\ShowFiles.jsx",[],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-2\\ShowFileDescriptions.jsx",[],["202","203"],"C:\\Users\\yurig\\BooksTextsSplit\\BooksTextsSplit\\ClientApp\\src\\components\\UploadBooks\\grid_col-1_row-2\\RadioButtons.jsx",[],{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","severity":1,"message":"209","line":2,"column":8,"nodeType":"210","messageId":"211","endLine":2,"endColumn":9},{"ruleId":"208","severity":1,"message":"212","line":8,"column":10,"nodeType":"210","messageId":"211","endLine":8,"endColumn":20},{"ruleId":"213","severity":1,"message":"214","line":11,"column":3,"nodeType":"215","messageId":"216","endLine":13,"endColumn":4},{"ruleId":"208","severity":1,"message":"209","line":2,"column":8,"nodeType":"210","messageId":"211","endLine":2,"endColumn":9},{"ruleId":"208","severity":1,"message":"217","line":5,"column":8,"nodeType":"210","messageId":"211","endLine":5,"endColumn":31},{"ruleId":"213","severity":1,"message":"214","line":12,"column":3,"nodeType":"215","messageId":"216","endLine":14,"endColumn":4},{"ruleId":"208","severity":1,"message":"209","line":2,"column":8,"nodeType":"210","messageId":"211","endLine":2,"endColumn":9},{"ruleId":"208","severity":1,"message":"218","line":9,"column":7,"nodeType":"210","messageId":"211","endLine":9,"endColumn":25},{"ruleId":"219","severity":1,"message":"220","line":150,"column":40,"nodeType":"221","messageId":"222","endLine":150,"endColumn":42},{"ruleId":"219","severity":1,"message":"220","line":183,"column":39,"nodeType":"221","messageId":"222","endLine":183,"endColumn":41},{"ruleId":"208","severity":1,"message":"223","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":17},{"ruleId":"208","severity":1,"message":"224","line":4,"column":8,"nodeType":"210","messageId":"211","endLine":4,"endColumn":19},{"ruleId":"225","severity":1,"message":"226","line":55,"column":91,"nodeType":"227","endLine":55,"endColumn":113},{"ruleId":"225","severity":1,"message":"226","line":70,"column":134,"nodeType":"227","endLine":70,"endColumn":159},{"ruleId":"208","severity":1,"message":"228","line":7,"column":9,"nodeType":"210","messageId":"211","endLine":7,"endColumn":30},{"ruleId":"204","replacedBy":"229"},{"ruleId":"206","replacedBy":"230"},"no-native-reassign",["231"],"no-negated-in-lhs",["232"],"no-unused-vars","'s' is defined but never used.","Identifier","unusedVar","'withRouter' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'ReactScrollWheelHandler' is defined but never used.","'TOGGLE_IS_FETCHING' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'NavLink' is defined but never used.","'logoPicture' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'versionSentencesPlace' is assigned a value but never used.",["231"],["232"],"no-global-assign","no-unsafe-negation"]